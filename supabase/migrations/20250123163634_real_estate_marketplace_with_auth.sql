
-- User Roles Enum
create type public.user_role as enum (
  'admin',
  'agent',
  'landlord',
  'student'
);

-- User Profiles Table
create table public.user_profiles (
  id uuid not null references auth.users on delete cascade,
  full_name text,
  avatar_url text,
  role user_role not null default 'student'::user_role,
  primary key (id)
);
comment on table public.user_profiles is 'Profile information for users.';

-- Function to create a public user profile when a new auth user signs up
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.user_profiles (id, full_name, role)
  values (
    new.id,
    new.raw_user_meta_data->>'full_name',
    (new.raw_user_meta_data->>'role')::user_role
  );
  return new;
end;
$$;

-- Trigger to call the function on new user creation
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Properties Table
create table public.properties (
  id bigint generated by default as identity primary key,
  landlord_id uuid not null references public.user_profiles(id),
  agent_id uuid null references public.user_profiles(id),
  title text not null,
  description text,
  address text,
  city text,
  state text,
  zip_code text,
  price numeric not null,
  property_type text, -- e.g., 'Apartment', 'House', 'Land'
  status text default 'draft', -- e.g., 'draft', 'active', 'inactive', 'rented', 'sold'
  bedrooms int,
  bathrooms int,
  area_sqft int,
  featured boolean default false,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);
comment on table public.properties is 'Real estate properties for sale or lease.';

-- Property Images Table
create table public.property_images (
  id bigint generated by default as identity primary key,
  property_id bigint not null references public.properties(id) on delete cascade,
  image_url text not null,
  is_primary boolean default false
);
comment on table public.property_images is 'Images for properties.';

-- Property Inquiries Table
create table public.property_inquiries (
  id bigint generated by default as identity primary key,
  property_id bigint not null references public.properties(id) on delete cascade,
  student_id uuid not null references public.user_profiles(id),
  message text,
  status text default 'pending', -- e.g., 'pending', 'contacted', 'closed'
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);
comment on table public.property_inquiries is 'Inquiries made by students/clients about properties.';

-- Saved Properties Table
create table public.saved_properties (
  id bigint generated by default as identity primary key,
  user_id uuid not null references public.user_profiles(id) on delete cascade,
  property_id bigint not null references public.properties(id) on delete cascade,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique (user_id, property_id)
);
comment on table public.saved_properties is 'Allows users to save their favorite properties.';

-- Property Showings Table
create table public.property_showings (
  id bigint generated by default as identity primary key,
  property_id bigint not null references public.properties(id) on delete cascade,
  student_id uuid not null references public.user_profiles(id),
  agent_id uuid null references public.user_profiles(id),
  scheduled_date timestamp with time zone not null,
  status text default 'scheduled', -- e.g., 'scheduled', 'confirmed', 'cancelled', 'completed'
  notes text
);
comment on table public.property_showings is 'Scheduled viewings for properties.';

-- Property Applications Table
create table public.property_applications (
  id bigint generated by default as identity primary key,
  property_id bigint not null references public.properties(id) on delete cascade,
  student_id uuid not null references public.user_profiles(id),
  status text default 'pending', -- e.g., 'pending', 'approved', 'rejected'
  message text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);
comment on table public.property_applications is 'Applications submitted by students for renting.';

-- Agent Performance Table
create table public.agent_performance (
  agent_id uuid not null primary key references public.user_profiles(id) on delete cascade,
  total_commission numeric default 0,
  successful_deals int default 0,
  average_rating numeric(2,1) default 0.0
);
comment on table public.agent_performance is 'Tracks performance metrics for agents.';

-- RLS Policies
alter table public.user_profiles enable row level security;
create policy "Public user profiles are viewable by everyone." on public.user_profiles for select using (true);
create policy "Users can insert their own profile." on public.user_profiles for insert with check (auth.uid() = id);
create policy "Users can update their own profile." on public.user_profiles for update using (auth.uid() = id);

alter table public.properties enable row level security;
create policy "Properties are viewable by everyone." on public.properties for select using (true);
create policy "Landlords can insert their own properties." on public.properties for insert with check (auth.uid() = landlord_id);
create policy "Landlords can update their own properties." on public.properties for update using (auth.uid() = landlord_id);
create policy "Agents can update properties assigned to them." on public.properties for update using (auth.uid() = agent_id);
create policy "Landlords can delete their own properties." on public.properties for delete using (auth.uid() = landlord_id);

alter table public.property_images enable row level security;
create policy "Property images are viewable by everyone." on public.property_images for select using (true);
-- Add insert/update/delete policies based on property ownership

alter table public.saved_properties enable row level security;
create policy "Users can view their own saved properties." on public.saved_properties for select using (auth.uid() = user_id);
create policy "Users can insert their own saved properties." on public.saved_properties for insert with check (auth.uid() = user_id);
create policy "Users can delete their own saved properties." on public.saved_properties for delete using (auth.uid() = user_id);

alter table public.property_inquiries enable row level security;
create policy "Users can view their own inquiries." on public.property_inquiries for select using (auth.uid() = student_id);
create policy "Landlords and Agents can view inquiries for their properties." on public.property_inquiries for select using (
  exists (
    select 1 from properties
    where properties.id = property_inquiries.property_id and (properties.landlord_id = auth.uid() or properties.agent_id = auth.uid())
  )
);
create policy "Students can create inquiries." on public.property_inquiries for insert with check (auth.uid() = student_id);

-- Add more RLS policies for other tables as needed...
