-- Create subscription_plans table
CREATE TABLE public.subscription_plans (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text NOT NULL,
  price numeric NOT NULL DEFAULT 0,
  duration_months integer NOT NULL DEFAULT 1,
  features text[] DEFAULT '{}',
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create user_subscriptions table
CREATE TABLE public.user_subscriptions (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid NOT NULL REFERENCES public.user_profiles(id) ON DELETE CASCADE,
  plan_id bigint NOT NULL REFERENCES public.subscription_plans(id) ON DELETE CASCADE,
  start_date timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
  end_date timestamp with time zone NOT NULL,
  status text DEFAULT 'active' CHECK (status IN ('active', 'expired', 'cancelled')),
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create commission_rates table
CREATE TABLE public.commission_rates (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  role public.user_role NOT NULL,
  rate numeric NOT NULL DEFAULT 0,
  description text,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create transactions table
CREATE TABLE public.transactions (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  property_id bigint NOT NULL REFERENCES public.properties(id) ON DELETE CASCADE,
  user_id uuid NOT NULL REFERENCES public.user_profiles(id) ON DELETE CASCADE,
  amount numeric NOT NULL,
  commission_amount numeric NOT NULL DEFAULT 0,
  commission_status text DEFAULT 'pending' CHECK (commission_status IN ('pending', 'paid', 'refunded')),
  payment_status text DEFAULT 'pending' CHECK (payment_status IN ('pending', 'completed', 'failed', 'refunded')),
  payment_method text,
  description text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create flags table
CREATE TABLE public.flags (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  item_type text NOT NULL CHECK (item_type IN ('property', 'user', 'inquiry', 'application')),
  item_id bigint NOT NULL,  -- Changed to bigint to match property id
  reporter_id uuid NOT NULL REFERENCES public.user_profiles(id) ON DELETE CASCADE,
  reason text NOT NULL,
  description text,
  status text DEFAULT 'pending' CHECK (status IN ('pending', 'reviewed', 'resolved')),
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
  resolved_at timestamp with time zone,
  resolved_by uuid REFERENCES public.user_profiles(id) ON DELETE SET NULL
);

-- Create support_tickets table
CREATE TABLE public.support_tickets (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid NOT NULL REFERENCES public.user_profiles(id) ON DELETE CASCADE,
  subject text NOT NULL,
  message text NOT NULL,
  status text DEFAULT 'open' CHECK (status IN ('open', 'in_progress', 'closed')),
  priority text DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high')),
  assigned_to uuid REFERENCES public.user_profiles(id) ON DELETE SET NULL,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create support_messages table
CREATE TABLE public.support_messages (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ticket_id bigint NOT NULL REFERENCES public.support_tickets(id) ON DELETE CASCADE,
  sender_id uuid NOT NULL REFERENCES public.user_profiles(id) ON DELETE CASCADE,
  content text NOT NULL,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create property_verifications table
CREATE TABLE public.property_verifications (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  property_id bigint NOT NULL REFERENCES public.properties(id) ON DELETE CASCADE,
  verified_by uuid NOT NULL REFERENCES public.user_profiles(id) ON DELETE CASCADE,
  status text DEFAULT 'pending' CHECK (status IN ('pending', 'verified', 'rejected')),
  notes text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create indexes for better query performance
CREATE INDEX idx_flags_reporter_id ON public.flags(reporter_id);
CREATE INDEX idx_flags_item_type_item_id ON public.flags(item_type, item_id);
CREATE INDEX idx_support_tickets_user_id ON public.support_tickets(user_id);
CREATE INDEX idx_support_tickets_status ON public.support_tickets(status);
CREATE INDEX idx_support_messages_ticket_id ON public.support_messages(ticket_id);
CREATE INDEX idx_support_messages_sender_id ON public.support_messages(sender_id);
CREATE INDEX idx_transactions_property_id ON public.transactions(property_id);
CREATE INDEX idx_transactions_user_id ON public.transactions(user_id);
CREATE INDEX idx_property_verifications_property_id ON public.property_verifications(property_id);
CREATE INDEX idx_property_verifications_verified_by ON public.property_verifications(verified_by);

-- RLS Policies
ALTER TABLE public.subscription_plans ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_subscriptions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.commission_rates ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.transactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.flags ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.support_tickets ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.support_messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.property_verifications ENABLE ROW LEVEL SECURITY;

-- Admin policies - full access for admin users
CREATE POLICY "Admins can access all subscription plans" ON public.subscription_plans 
FOR ALL USING (EXISTS (
  SELECT 1 FROM public.user_profiles 
  WHERE id = auth.uid() AND role = 'admin'
));

CREATE POLICY "Admins can access all user subscriptions" ON public.user_subscriptions 
FOR ALL USING (EXISTS (
  SELECT 1 FROM public.user_profiles 
  WHERE id = auth.uid() AND role = 'admin'
));

CREATE POLICY "Admins can access all commission rates" ON public.commission_rates 
FOR ALL USING (EXISTS (
  SELECT 1 FROM public.user_profiles 
  WHERE id = auth.uid() AND role = 'admin'
));

CREATE POLICY "Admins can access all transactions" ON public.transactions 
FOR ALL USING (EXISTS (
  SELECT 1 FROM public.user_profiles 
  WHERE id = auth.uid() AND role = 'admin'
));

CREATE POLICY "Admins can access all flags" ON public.flags 
FOR ALL USING (EXISTS (
  SELECT 1 FROM public.user_profiles 
  WHERE id = auth.uid() AND role = 'admin'
));

CREATE POLICY "Admins can access all support tickets" ON public.support_tickets 
FOR ALL USING (EXISTS (
  SELECT 1 FROM public.user_profiles 
  WHERE id = auth.uid() AND role = 'admin'
));

CREATE POLICY "Admins can access all support messages" ON public.support_messages 
FOR ALL USING (EXISTS (
  SELECT 1 FROM public.user_profiles 
  WHERE id = auth.uid() AND role = 'admin'
));

CREATE POLICY "Admins can access all property verifications" ON public.property_verifications 
FOR ALL USING (EXISTS (
  SELECT 1 FROM public.user_profiles 
  WHERE id = auth.uid() AND role = 'admin'
));

-- Insert default commission rates
INSERT INTO public.commission_rates (role, rate, description, is_active) VALUES
('landlord', 5.0, 'Commission for landlord property listings', true),
('agent', 3.5, 'Commission for agent-facilitated transactions', true),
('student', 1.0, 'Fee for premium student features', true);

-- Insert default subscription plans
INSERT INTO public.subscription_plans (name, price, duration_months, features, is_active) VALUES
('Basic Plan', 0.00, 1, ARRAY['Basic property listings', 'Email support'], true),
('Premium Plan', 9.99, 1, ARRAY['Unlimited listings', 'Priority support', 'Featured listings'], true),
('Professional Plan', 29.99, 1, ARRAY['All Premium features', 'Analytics dashboard', 'Custom branding'], true);