Help me continuecreating the webapp user MERN stack vite react 1️⃣ Concept Overview

A real estate platform that connects:

Landlords / property owners → Post their buildings, apartments, lands, or shops for sale/lease.

Real estate agents → Help manage listings, negotiate deals, and handle viewings.

Clients & students → Search, view, and book apartments or properties.

The app will act as a bridge between supply (landlords) and demand (buyers, tenants, students).

2️⃣ Key Features
🏠 For Landlords

Property listing (photos, price, location, availability).

Lease/sale options.

Dashboard to manage properties & view inquiries.

Instant notifications when someone is interested.

👩‍💼 For Agents

Manage listings for multiple landlords.

Track potential clients and appointments.

Commission tracking & reports.

👨‍🎓 For Students/Clients

Search apartments by price, proximity to university, size, facilities (Wi-Fi, furnished rooms).

Map view with nearby amenities (markets, bus stops).

Option to book online or schedule viewing.

🔧 Other Features

Admin panel (approve properties, manage users).

Payment integration (if you want deposits or commissions online).

Chat or call button for direct communication.

Rating & review system for agents and landlords.

“Verified” badges for trusted landlords.

3️⃣ Target Market

Students (primary): looking for affordable, nearby housing.

Lecturers & staff: often need decent apartments or land.

Small investors: might buy land or shop spaces.

4️⃣ Revenue Models

Subscription fee for landlords/agents to post listings.

Commission per successful deal (rent or sale).

Featured listing (pay to highlight a property).

Ads (e.g., furniture sellers, movers).

5️⃣ Pros (Advantages)

🏘️ Solves real problems: Students struggle to find housing in developing towns.

💸 Income potential: Multiple revenue streams (ads, commissions, subscriptions).

🧭 Local monopoly: Likely no strong competitor in small towns.

⏱️ Convenience: Cuts out time wasted going around to find vacancies.

📱 Scalable: Start in one town → expand to other university towns.7️⃣ Design & Tech Tips

Simple interface → Big buttons, clear filters, offline-friendly (progressive web app).

Lightweight → Optimize for slow internet & older phones.

Responsive design → Works on mobile, since most users will browse via phones.

Security → Verify landlords and agents to avoid scams. Add roommate finder for students.

Integrate virtual tours or short videos of rooms.

Offer legal & tenancy agreements templates.

Build a rating system for tenants to encourage good behavior. 
1. Visual Hierarchy:
- Design a clean, minimalist homepage featuring a prominent search bar with map integration
- Implement a responsive grid layout for property listings with consistent card dimensions
- Use whitespace effectively to improve content readability and visual flow

2. Navigation & Search:
- Create a sticky header with main navigation categories and user account options
- Design an advanced search interface with collapsible filters
- Include an interactive map component with polygon selection and clustering
- Add a clear visual indicator for search refinement options (price, bedrooms, etc.)

3. Property Listing Cards:
- Design cards with primary photo, price, key details, and quick action buttons
- Implement hover states with additional property information
- Include save/favorite functionality with visual feedback
- Show agent information and contact options

4. Property Detail Pages:
- Create a gallery-style photo viewer with thumbnail navigation
- Design sections for property details, amenities, and location information
- Include an interactive mortgage calculator with adjustable parameters
- Add a prominent lead capture form and showing scheduler

5. Agent Dashboard:
- Design an intuitive interface for managing listings and leads
- Create data visualization components for analytics
- Include a calendar view for showing appointments
- Add bulk action capabilities for listing management

6. Mobile Considerations:
- Ensure touch-friendly interface elements
- Design collapsible navigation for smaller screens
- Optimize map interactions for mobile devices
- Maintain functionality across all viewport sizes

7. Brand & Style Guidelines:
- Use a modern color palette focusing on blues and neutrals
- Implement consistent typography with clear hierarchy
- Include subtle animations for user interactions
- Maintain accessibility standards with proper contrast ratios

8. Technical Requirements:
- Support for high-resolution images with lazy loading
- Optimize for fast initial page load
- Include loading states and skeleton screens
- Ensure SEO-friendly markup structure
build the dashboard for all four roles and integrate google auth and darkmode 
Integrate Supabase with my application and finish the application and make sure it meets all the requirement
make sure to follow the requirement just continue creating don't remove any previous file